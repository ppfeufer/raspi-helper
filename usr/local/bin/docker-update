#!/usr/bin/env bash

current_user_home=${HOME} # sudo returns /root here, which is intended
docker_directory="${current_user_home}/docker/"
restart_container=True

# Let's see what our compose command will be …
if command -v docker-compose > /dev/null
    then
        printf 'Legacy `docker-compose` detected …\n'
        printf 'Please updated your docker to the latest version!\n\n'

        compose_command="docker-compose"
    else
        compose_command="docker compose"
fi

usage() {
    printf "Usage:\n"
    printf "\t$0 [OPTION]\n"

    printf "\nExample:\n"
    printf "\t$0 --directory=/home/myhome/docker/\tTo search for docker-compose files in the given directory.\n"

    printf "\nOptions:\n"
    printf "\t-d, --directory\t\tThe The directory the script is looking for docker-compose files. If not specified, \"${current_user_home}/docker/\" is assumed.\n"

    printf "\t--no-restart\t\tDon't restart the docker container. This is useful when you reboot the system afterwards so containers that need longer to start won't be restarted twice in short succession.\n"
    exit 1;
}


for i in "$@"
    do
        case $i in
            -d=* | --directory=*)
                docker_directory="${i#*=}"
                shift
                ;;

            --no-restart)
                restart_container=False
                ;;

            -* | --*)
                echo "Unknown option $i"
                usage
                exit 1
                ;;

            *)
                usage
                ;;
        esac
    done


target_directory="${docker_directory%/}/"


update_docker_container () {
    cd ${1}

    printf "\n"

    # Check for docker-compose.yaml or docker-compose.yml file
    if [[ -f "docker-compose.yaml" || -f "docker-compose.yml" ]]
        then
            printf "Attempting to update docker containers in \"${1}\" …\n"
            printf "Docker compose file found, updating docker containers …\n"

            if [[ $(git rev-parse --show-toplevel 2>/dev/null) = "${PWD}" ]]
                then
                    printf "Git repository \"${dirname}\" detected, updating …\n"

                    git pull
            fi

            # Update docker containers
            $(${compose_command} pull)

            # Restart docker containers
            if [ ${restart_container} == True ]
                then
                    $(${compose_command} down)
                    $(${compose_command} up -d)
            fi
        else
            printf "Neither 'docker-compose.yaml' nor 'docker-compose.yml' found, nothing to do here …\n"
    fi
}


# Check if we have docker compose file in the given docker directory,
# otherwise walk through its sub-directories
cd ${docker_directory}

printf "Checking for a docker compose file in \"${docker_directory}\" …\n"

if [[ -f "docker-compose.yaml" || -f "docker-compose.yml" ]]
    then
        update_docker_container ${docker_directory}
    else
        subdircount=$(find ${target_directory} -maxdepth 1 -type d | wc -l)

        if [[ "${subdircount}" -eq 1 ]]
            then
                printf "Neither 'docker-compose.yaml' nor 'docker-compose.yml' found, nothing to do here …\n"
            else
                printf "No docker compose file found, walking through possible subdirectories …\n"

                for path in ${target_directory}*/
                    do
                        [ -d "${path}" ] || continue # if not a directory, skip

                        dirname="$(basename "${path}")"

                        update_docker_container ${path}
                    done
        fi
fi
